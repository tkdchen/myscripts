---
- hosts: localhost
  become_method: sudo

  vars:
    aliyun_vm_ip: "123.57.27.187"
    go_home: "{{ ansible_user_dir }}/go"
    go_proxy: "https://goproxy.io,direct"
    vagrant_home: "/var/local/vagrant_home"
    vagrant_libvirt_images_dir: "/var/local/vagrant_libvirt_images"
    bash_completion_user_dir: "{{ ansible_user_dir }}/.local/share/bash-completion"
    local_bash_completion_dir: "{{ bash_completion_user_dir }}/completions"
    local_bin_dir: "{{ ansible_user_dir }}/.local/bin"
    basic_packages:
      - bash-completion
      - bat
      - buildah
      - cli  # tkn
      - emacs
      - fedpkg
      - gcc
      - gcc-c++
      - git
      - golang
      - hexchat
      - ibus
      - ibus-pinyin
      - ibus-table
      - ibus-table-chinese
      - ibus-table-code
      - kate
      - konsole
      - krb5-devel
      - krb5-pkinit
      - krb5-workstation
      - kwrite
      - mariadb
      - mariadb-devel
      - neovim
      - npm
      - onedrive
      - podman
      - podman-compose
      - postgresql
      - postgresql-devel
      - postgresql-server
      - python3-devel
      - python3-pip
      - python3-tabulate
      - ripgrep
      - rpm
      - rpmdevtools
      - rsync
      - vagrant
      - vim-enhanced
    homebrew_packages:
      - neovim

  tasks:
    - name: üì¶ Install packages from Fedora repos
      become: true
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop: "{{ basic_packages | flatten(levels=1) }}"
      when: ansible_facts['system'] == "Linux"
      tags:
        - baseos
        - packages

    - name: Enable rpmfusion repo
      become: true
      ansible.builtin.dnf:
        name: "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm"
        state: present
      when: ansible_facts['system'] == "Linux"
      tags:
        - baseos
        - packages

    - name: üì¶ Install rpmfusion-free-release
      become: true
      ansible.builtin.dnf:
        name: rpmfusion-free-release
        state: present
      when: ansible_facts['system'] == "Linux"
      tags:
        - baseos
        - packages

    - name: üì¶ Install third-party packages
      become: true
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop:
        - vlc
      when: ansible_facts['system'] == "Linux"
      tags:
        - baseos
        - packages

    - name: Install packages from homebrew
      ansible.builtin.command: "brew install {{ item }}"
      loop: "{{ homebrew_packages | flatten(levels=1) }}"
      when: ansible_facts['system'] == "Darwin"
      tags:
        - baseos
        - packages

    - name: Name Aliyun VM host
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hosts
        state: present
        line: "{{ aliyun_vm_ip }}  aliyun-vm"
        backup: true
      tags:
        - baseos

    - name: Create data directories
      become: true
      ansible.builtin.file:
        path: "{[ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ vagrant_home }}"
        - "{{ vagrant_libvirt_images_dir }}"

    - name: Create code directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ ansible_user_dir }}/code"
        - "{{ ansible_user_dir }}/vagrant-machines"
        - "{{ local_bin_dir }}"
      tags:
        - baseos

    - name: Set git global config
      community.general.git_config:
        name: "{{ item.config }}"
        scope: global
        value: "{{ item.value }}"
      loop:
        - { config: 'alias.br', value: 'branch' }
        - { config: 'alias.cm', value: 'commit' }
        - { config: 'alias.co', value: 'checkout' }
        - { config: 'alias.st', value: 'status' }
        - { config: 'alias.st', value: 'status' }
        - { config: 'color.branch', value: 'true' }
        - { config: 'color.diff', value: 'true' }
        - { config: 'color.ui', value: 'true' }
        - { config: 'core.editor', value: 'vim' }
        - { config: 'user.name', value: 'Chenxiong Qi' }
        - { config: 'user.email', value: 'qcxhome@gmail.com' }
      tags:
        - git-config

    - name: Create go home directory
      ansible.builtin.file:
        path: "{{ go_home }}"
        state: directory
        mode: "0755"
      tags:
        - lsp
        - golang

    - name: ‚úçÔ∏è Install gopls LSP server  # noqa: no-changed-when
      ansible.builtin.command: "go get golang.org/x/tools/gopls@latest"
      environment:
        GOPATH: "{{ go_home }}"
        GOPROXY: "{{ go_proxy }}"
      tags:
        - lsp
        - golang

    - name: Create npm directory
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/npm"
        state: directory
        mode: "0755"
      tags:
        - lsp
        - npm

    - name: ‚úçÔ∏è Install LSP servers  # noqa: no-changed-when
      ansible.builtin.command: "npm install {{ item }}"
      args:
        chdir: "{{ ansible_user_dir }}/npm"
      loop:
        - bash-language-server
        - dockerfile-language-server-nodejs
        - pyright
        - typescript
        - typescript-language-server
      tags:
        - lsp
        - npm

    - name: Ensure fedora.upn
      ansible.builtin.lineinfile:
        path: "{{ ansible_user_dir }}/.fedora.upn"
        state: present
        line: "{{ fedora_username }}"
      tags:
        - fedora-community

    # Manage dotfiles

    - name: Install ideavimrc
      ansible.builtin.copy:
        src: ideavimrc
        dest: "{{ ansible_user_dir }}/.ideavimrc"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "u=rw,g=r,o=r"
        backup: true
      tags:
        - dotfiles
        - ideavimrc

    - name: Install vimrc
      ansible.builtin.copy:
        src: vimrc
        dest: "{{ ansible_user_dir }}/.vimrc"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "u=rw,g=r,o=r"
        backup: true
      tags:
        - dotfiles
        - vimrc

    - name: Ensure .vim directory exists
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.vim"
        stat: directory
        mode: "0755"

    - name: Copy custom snippets
      ansible.builtin.copy:
        src: custom-snippets
        dest: "{{ ansible_user_dir }}/.vim"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "u=rw,g=r,o=r"
        backup: true
      tags:
        - vimrc

    - name: Install neovim init.vim
      ansible.builtin.copy:
        src: nvim-init.vim
        dest: "{{ ansible_user_dir }}/.config/nvim/init.vim"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "u=rw,g=r,o=r"
        backup: true
      tags:
        - dotfiles
        - nvim-init

    - name: Install bashrc
      ansible.builtin.template:
        src: bashrc.j2
        dest: "{{ ansible_user_dir }}/.bashrc"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "u=rw,g=r,o=r"
        backup: true
      tags:
        - dotfiles
        - bashrc

    - name: Homebrew - create working directory
      ansible.builtin.tempfile:
        state: file
        suffix: homebrew
      register: homebrew_inst_workdir
      when: ansible_facts['system'] == "Darwin"
      tags:
        - homebrew

    - name: Homebrew - download installation script
      ansible.builtin.git:
        repo: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/install.git
        dest: "{{ homebrew_inst_workdir.path }}/homebrew"
        version: master
      when: ansible_facts['system'] == "Darwin" and homebrew_inst_workdir.path is defined
      tags:
        - homebrew

    - name: Homebrew - start to install
      ansible.builtin.command: "{{ homebrew_inst_workdir.path }}/homebrew/install.sh"
      when: ansible_facts['system'] == "Darwin" and homebrew_inst_workdir.path is defined
      tags:
        - homebrew

    - name: onedrive - install onedrive CLI
      become: true
      ansible.builtin.dnf:
        name: onedrive
        state: present
      when: ansible_facts['system'] == "Linux"
      tags:
        - onedrive
    - name: onedrive - run onedrive
      ansible.builtin.command: "onedrive --display-config"
      when: ansible_facts['system'] == "Linux"
      tags:
        - onedrive
    - name: onedrive - install sync_files
      ansible.builtin.copy:
        src: "onedrive-sync-files"
        dest: "{{ ansible_user_dir }}/.config/onedrive/sync_list"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "u=rw,g=r,o=r"
        backup: true
      when: ansible_facts['system'] == "Linux"
      tags:
        - onedrive
        - onedrive-configs

    # Bash completions
    #
    - name: bash-completion - ensure local completions directory exists
      ansible.builtin.file:
        path: "{{ local_bash_completion_dir }}"
        state: directory
        mode: "0755"
      tags:
        - bash-completion

    - name: bash-completion - install completions
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ bash_completion_user_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "u=rw,g=r,o=r"
        backup: true
      loop: "{{ lookup('fileglob', 'completions/*.bash', wantlist=True) }}"
      tags:
        - bash-completion

    - name: Fedora - install fas-kinit script
      ansible.builtin.copy:
        src: "fas-kinit.sh"
        dest: "{{ local_bin_dir }}/fas-kinit"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        backup: true
      tags:
        - fedora
